#version 330 core

out vec4 FragColor;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


#define NR_POINT_LIGHTS 4


in vec3 vertexColor;
in vec3 Normal;
in vec3 FragPos;
in vec2 vertexUV;

uniform vec3 viewPos;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform Material material;

uniform int texNum;
uniform sampler2D greenGrass;
uniform sampler2D bus;
uniform sampler2D tires;
uniform sampler2D lamps;
uniform sampler2D particles;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragcol);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 fragcol);
		
void main()
{    

	vec3 fragmentCol;
	
	switch (texNum){
		case 0:
			fragmentCol= texture(greenGrass, vertexUV).xyz;
		case 1:
			fragmentCol= texture(bus, vertexUV).xyz;
		case 2:
			fragmentCol= texture(tires, vertexUV).xyz;
		case 3:
			fragmentCol= texture(lamps, vertexUV).xyz;
		case 4:
			fragmentCol= texture(particles, vertexUV).xyz;
	}


    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

	// directional lighting
		vec3 result = CalcDirLight(dirLight, norm, viewDir, fragmentCol);
    
	// point lights
		for(int i = 0; i < NR_POINT_LIGHTS; i++)
			result += CalcPointLight(pointLights[i], norm, FragPos, viewDir, fragmentCol);    
		

    FragColor = vec4(result, 1.0);
}

// Directional light
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 fragcol)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse
    float diff = max(dot(normal, lightDir), 0.0);
    // specular
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
 
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, vertexUV));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, vertexUV));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, vertexUV));
    return (ambient + (diffuse + specular)*fragcol);
}

// calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec3 fragcol)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, vertexUV));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, vertexUV));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, vertexUV));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + (diffuse + specular)*fragcol);
}